{"name":"HTML","tagline":"Deliverables of the HTML Working Group","body":"html\r\n====\r\n\r\nDeliverables of the HTML Working Group\r\n\r\nCommits twitter feed: <a href=\"https://twitter.com/HTML_Commits/\">@HTML_commits</a>\r\n\r\n\r\nSpec Editing Cheatsheet\r\n===\r\n\r\nChecking out the HTML spec\r\n\r\n   1. the HTML spec is on GitHub https://github.com/w3c/html\r\n\r\n   2. there are multiple branches - get master to build the spec\r\n\r\nPull the code from GitHub:\r\n\r\n    $ git clone https://git@github.com/w3c/html.git\r\n    $ cd html\r\n    $ git checkout -b whatwg origin/feature/whatwg\r\n\r\nTo check what branches you have:\r\n\r\n    $ git branch\r\n\r\nTo continue editing at a later stage:\r\n\r\n    $ git checkout master\r\n    $ git pull --rebase\r\n\r\nThen check out each branch and:\r\n\r\n    $ git rebase master\r\n\r\nTo commit and push code to GitHub:\r\n\r\n    $ git commit -a\r\n    $ git push\r\n\r\n\r\n\r\nConfiguring git\r\n---\r\n\r\nIf you're editing the spec on Windows, be sure to read up on\r\n[how to deal with line endings](https://help.github.com/articles/dealing-with-line-endings).\r\n\r\nYou'll probably want to configure Git to automatically rebase on pull.\r\nTo do this, edit `.git/config` in your repository. In the\r\n`[branch \"master\"]` section, add a `rebase = true` line. To ensure\r\nthis happens for any new branches you create, add a new section like so:\r\n\r\n    [branch]\r\n        autosetuprebase = always\r\n\r\n\r\nInstalling the necessary software\r\n---\r\n\r\n  1. You need to have python installed on your system.\r\n\r\n  2. Install [Anolis](http://anolis.gsnedders.com/):\r\n\r\n        $ hg clone https://bitbucket.org/ms2ger/anolis\r\n        $ cd anolis; sudo python setup.py install\r\n\r\n     Periodically, make sure your Anolis is up to date:\r\n\r\n        $ cd anolis\r\n        $ hg pull\r\n\r\n     If there have been changes, update and reinstall:\r\n\r\n        $ hg update\r\n        $ sudo python setup.py install\r\n\r\n  3. Install [html5lib](http://code.google.com/p/html5lib/):\r\n\r\n        $ hg clone https://code.google.com/p/html5lib/\r\n        $ cd html5lib/python; sudo python setup.py install\r\n\r\n     Periodically, make sure your html5lib is up to date:\r\n\r\n        $ cd html5lib\r\n        $ hg pull\r\n\r\n     If there have been changes, update and reinstall:\r\n\r\n        $ hg update\r\n        $ cd python; sudo python setup.py install\r\n\r\n  4. Install [lxml](http://lxml.de):\r\n\r\n        $ sudo easy_install lxml\r\n\r\n  5. Ensure you have a clone of the [html-tools](https://github.com/w3c/html-tools/) downloaded.\r\n\r\n\r\nBuild the spec\r\n---\r\n\r\nPlease check out and follow the repository at https://github.com/w3c/html-tools .\r\n\r\n\r\nCherry pick commits from the WHATWG spec\r\n---\r\n\r\n   1. the WHATWG spec is developed in SVN at the WHATWG\r\n   2. there is a git clone of it on GitHub\r\nhttps://github.com/w3c/html/tree/feature/whatwg\r\n   3. we cherry-pick commits from the WHATWG spec into the html spec\r\n\r\nCheckout the WHATWG spec:\r\n\r\n    $ git checkout feature/whatwg\r\n\r\nFind out commit differences to html branch:\r\n\r\n    $ git cherry master\r\n\r\nFind a commit that you want to apply, get it’s SHA:\r\n\r\n    $ git log\r\n\r\nShow the SHA commit e.g.:\r\n\r\n    $git show 56446c4536af1ec5b39bde03b402d0772625fd92\r\n\r\nCheckout the html spec:\r\n\r\n    $ git checkout master\r\n\r\nCherry pick the commit selected from before:\r\n\r\n    $ git cherry-pick -x 56446c4536af1ec5b39bde03b402d0772625fd92\r\n\r\nIf you want to edit the commit:\r\n\r\n    $ git cherry-pick -x -e 56446c4536af1ec5b39bde03b402d0772625fd92\r\n\r\nShow changes to GitHub:\r\n\r\n    $ git diff origin\r\n\r\nIf you want to abort a cherry-pick:\r\n\r\n    $ git cherry-pick --abort\r\n\r\nIf you need a merge strategy:\r\n\r\n    $ git cherry-pick --strategy=ours -x 56446c4536af1ec5b39bde03b402d0772625fd92\r\n\r\nOnly pick parts of the commit (no-commit, then add selectively):\r\n\r\n    $ git cherry-pick -n -x 56446c4536af1ec5b39bde03b402d0772625fd92\r\n    $ git add -i\r\n       r = revert a file\r\n       p = go through by hunk and re-patch\r\n       (when “>>” hit ENTER to start)\r\n       q = bye\r\n    To just commit the staged parts:\r\n    $ git commit\r\n    To reset the unselected hunks:\r\n    $ git checkout complete.html index source\r\n\r\nCheck if a specific commit is contained in the master:\r\n\r\n    $ git checkout master\r\n    $ git branch --contains 56446c4536af1ec5b39bde03b402d0772625fd92\r\n\r\nCreate a new feature branch:\r\n---\r\n[make sure your .gitconfig defaults push to upstream]\r\n\r\n    $ git checkout master\r\n    $ git checkout -b feature/blah\r\n    $ git push --set-upstream origin feature/blah\r\n\r\n\r\nMerging a feature branch:\r\n---\r\nYou should not use the GitHub pull request merge feature, but instead rebase locally and push (to avoid a messy merge and get a linear history):\r\n\r\n    $ git checkout feature/blah\r\n    $ git rebase master\r\n\r\nTest everything still works, then push to GitHub:\r\n\r\n    $ git push -f\r\n\r\nThen merge on master:\r\n\r\n    $ git checkout master\r\n    $ git merge feature/blah\r\n    $ git push\r\n\r\nIf you want to delete the branch, too, remove it both on local and GitHub (the issue with the pull request will continue to exist):\r\n\r\n    $ git branch -d feature/blah\r\n    $ git push origin :feature/blah\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}